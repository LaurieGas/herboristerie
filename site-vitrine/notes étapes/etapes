1- BDD
- création de l'entité Utilisateurs (video 7.1) avec la ligne de commande PHP bin/console make:entity user. ajouter les champs dont on a besoin. pour le mdp on écrit "hash" car on souhaite que le mdp soit haché et encrypté dans la bdd. 
ensuite on fera la migration pour que la requete SQL cré la table précédemment créée. 
On retrouvera notre dans dans le php myAdmin. 

2- CONNEXION 
- authentification: encodage des mdp/hash (video 7.5)
    => psw écrits en durs, on souhaite les encrypter 
    => composant de sécurité : ens de fonctionnalités qui gérent la sécurité dans symfony
    => chemin : config/packages/security.yaml
    => mise en place des encodeurs : ils permettent de hasher des mdp des Utilisateurs
    => déclaration des encodeurs : possibilité d'en déclarer plusieurs (qd on souhaite encoder des données dans telle entité, utilise cet algo please)
    => dans notre cas on utlise l'algo "bcrypt" car très utilisé, moderne et résistant
    => utilisation du userPasswordEncoder : permet d'encoder les mdp des userPasswordEncoder
    => méthode encodepassword : encode mdp avec l'algo choisi
    => VIDEO 7.6
    => affichage pour se connecter : création d'un provider* (entité user) : dans security.yaml, provider signifit la provenance de l'ens des données de l'entité user (video 7.7) *fournisseur de données, le provider fera le lien entre les données présentes dans l'entité en bdd et les données saisies par le user
    => mise en place du formulaire de connexion (video 7.8) : création d'un controller + vue
    => on envoit le formulaire vers la fonction login qui est ds le compte controller, pq ? Car symfony va intercepter les infos, va valider si le user est bien un utilisateur du site, on ne traite pas les données ns-memes (form_login)
    => mise en place de l'authentification du user: fonctionnalité form_login : Symfony qui va traiter les infos du formulaire (video 7.9s)
    => ds security/yaml : définition des firewalls (= qui définit les différentes parties de l'appli et cmt on veut les sécuriser)
                        : méthode form_login = ici on précise un provider (db) , form_login = on précise le path pr aller à la page de connexion et check_path = le path pour vérifier les infos d'authentification
    => ds le formulaire : on précise l'action qui sera la route qui emmène vers notre page de connexion

    MAJ: 
    => authentification : https://symfony.com/doc/4.4/security.html#installation (étapes)
        - utiliser le make:user
        - configurer le security.yaml
        - encoder password : php bin/console security:encode-password
    => implementation de la userInterface (video 7.)
    => authentification avec le login form authentification : https://symfony.com/doc/4.4/security/form_login_setup.html (étapes)
        - authentification Symfony avec ligne de commande : php bin/console make:auth (crée un  controller, une vue, le login form authenticator*)

3. création du formulaire d'inscription d'un user (video 7.12 )
4. Création controller administration : controller + vue ( video 14. )
     - creation AdminController video 14.1
     - Habillage différent pour l'admin video 14.2
     - MAJ barre de navigation 14.3
     - Sécurité admin : protection des accès 14.4
5. Creation page de connexion pour l'administrateur 14.5
    - creation d'un firewall 14.6
6. Creation du formulaire de connexion pour l'admin 14.7
   - creation deconnexion 14.8

7. Sécurité compte/mdp (video 7.6)
8. CRUD COMPTE ADMIN 
- Gestion du compte : creation de la page mon compte CREATE ( video 8.4)
- gestion du compte : modification du compte + mdp,(video 8.5)
9. La mise en place des rôles (video 9. )

BONUS -
Pour les images afin de les charger correctement ( video 4.7)
